{"version":3,"file":"js/564.faa0799c.js","mappings":"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","sources":["webpack://d3_vis/./src/views/CollapsibleTreeView.vue","webpack://d3_vis/./src/views/CollapsibleTreeView.vue?845e"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Vue.js and D3 </h2>\r\n        <h2>{{ title }}</h2>\r\n\r\n        <v-container class=\"bg-surface-variant\" fluid>\r\n            <v-row no-gutters>\r\n                <v-col cols=\"12\" sm=\"4\">\r\n                    <h3>\r\n                        Code\r\n                    </h3>\r\n                </v-col>\r\n                <v-col cols=\"12\" sm=\"8\">\r\n                    <h3>\r\n                        Visualization\r\n                    </h3>\r\n                </v-col>\r\n\r\n            </v-row>\r\n            <v-row no-gutters>\r\n\r\n                <v-col cols=\"12\" sm=\"4\">\r\n                    <v-card class=\"ma-1\" style=\"overflow-y: scroll;\" height=\"630\">\r\n                        <pre><code> {{ codeSample }} </code></pre>\r\n                    </v-card>\r\n                </v-col>\r\n\r\n                <v-col cols=\"12\" sm=\"8\">\r\n                    <div ref=\"box\">\r\n                        <v-sheet class=\"ma-2 pa-2\">\r\n                            <svg :width=\"this.width\" height=\"600\" class=\"container-border\" preserveAspectRatio=\"none\">\r\n                            </svg>\r\n                        </v-sheet>\r\n                    </div>\r\n                </v-col>\r\n\r\n            </v-row>\r\n        </v-container>\r\n\r\n    </div>\r\n</template>\r\n  \r\n  \r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport data from '../../public/flare-2.json'\r\n\r\nexport default {\r\n    name: 'CollapsibleTreeView',\r\n    data() {\r\n        return {\r\n            width: 600,\r\n            title: 'Collapsible Tree',\r\n            codeSample: `//ToDo Zoom function`\r\n        }\r\n    },\r\n    created() {\r\n        window.addEventListener(\"resize\", this.setBoxWidth);\r\n    },\r\n    destroyed() {\r\n        window.removeEventListener(\"resize\", this.setBoxWidth);\r\n    },\r\n    methods: {\r\n        setBoxWidth() {\r\n            try {\r\n                this.width = this.$refs.box.clientWidth - 40; // Good enough\r\n            }\r\n            catch {\r\n                this.width = 600\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        this.setBoxWidth()\r\n\r\n        let width_m = this.width\r\n        console.log(width_m)\r\n\r\n        let dx = 10\r\n        let dy = width_m / 4\r\n\r\n        let margin = ({ top: 10, right: 120, bottom: 10, left: 40 })\r\n\r\n        let diagonal = d3.linkHorizontal().x(d => d.y).y(d => d.x)\r\n        let tree = d3.tree().nodeSize([dx, dy])\r\n\r\n\r\n        const root = d3.hierarchy(data);\r\n\r\n        // const handleZoom = (e) => {\r\n        //     //d3.select('svg').attr('transform', e.transform);\r\n        //     d3.selectAll('svg g')\r\n        //         .attr('transform', e.transform);\r\n        // }\r\n\r\n        // let zoom = d3.zoom().on('zoom', handleZoom)\r\n\r\n\r\n\r\n        root.x0 = dy / 2;\r\n\r\n        root.y0 = 0;\r\n\r\n        root.descendants().forEach((d, i) => {\r\n            d.id = i;\r\n            d._children = d.children;\r\n            if (d.depth && d.data.name.length !== 7) d.children = null;\r\n        });\r\n\r\n        const svg = d3.select(\"svg\")\r\n            //.call(zoom)\r\n            .attr(\"viewBox\", [-margin.left, -margin.top, width_m, dx])\r\n            .style(\"font\", \"10px sans-serif\")\r\n            .attr(\"preserveAspectRatio\", \"xMinYMin\")\r\n            .style(\"user-select\", \"none\");\r\n\r\n        const gLink = svg.append(\"g\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"#555\")\r\n            .attr(\"stroke-opacity\", 0.4)\r\n            .attr(\"stroke-width\", 1.5);\r\n\r\n        const gNode = svg.append(\"g\")\r\n            .attr(\"cursor\", \"pointer\")\r\n            .attr(\"pointer-events\", \"all\");\r\n\r\n        function update(source, event) {\r\n            const duration = event && event.altKey ? 2500 : 250;\r\n            const nodes = root.descendants().reverse();\r\n            const links = root.links();\r\n\r\n            // Compute the new tree layout.\r\n            tree(root);\r\n\r\n            let left = root;\r\n            let right = root;\r\n            root.eachBefore(node => {\r\n                if (node.x < left.x) left = node;\r\n                if (node.x > right.x) right = node;\r\n            });\r\n\r\n            const height = right.x - left.x + margin.top + margin.bottom;\r\n\r\n            const transition = svg.transition()\r\n                .duration(duration)\r\n                .attr(\"viewBox\", [-margin.left, left.x - margin.top, width_m, height])\r\n                .tween(\"resize\", window.ResizeObserver ? null : () => () => svg.dispatch(\"toggle\"));\r\n\r\n            // Update the nodesâ€¦\r\n            const node = gNode.selectAll(\"g\")\r\n                .data(nodes, d => d.id);\r\n\r\n            // Enter any new nodes at the parent's previous position.\r\n            const nodeEnter = node.enter().append(\"g\")\r\n                .attr(\"transform\", d => `translate(${source.y0},${source.x0})`)\r\n                .attr(\"fill-opacity\", 0)\r\n                .attr(\"stroke-opacity\", 0)\r\n                .on(\"click\", (event, d) => {\r\n                    d.children = d.children ? null : d._children;\r\n                    update(d);\r\n                });\r\n\r\n            nodeEnter.append(\"circle\")\r\n                .attr(\"r\", 2.5)\r\n                .attr(\"fill\", d => d._children ? \"#555\" : \"#999\")\r\n                .attr(\"stroke-width\", 10);\r\n\r\n            nodeEnter.append(\"text\")\r\n                .attr(\"dy\", \"0.31em\")\r\n                .attr(\"x\", d => d._children ? -6 : 6)\r\n                .attr(\"text-anchor\", d => d._children ? \"end\" : \"start\")\r\n                .text(d => d.data.name)\r\n                .clone(true).lower()\r\n                .attr(\"stroke-linejoin\", \"round\")\r\n                .attr(\"stroke-width\", 3)\r\n                .attr(\"stroke\", \"white\");\r\n\r\n            // Transition nodes to their new position.\r\n            const nodeUpdate = node.merge(nodeEnter).transition(transition)\r\n                .attr(\"transform\", d => `translate(${d.y},${d.x})`)\r\n                .attr(\"fill-opacity\", 1)\r\n                .attr(\"stroke-opacity\", 1);\r\n\r\n            // Transition exiting nodes to the parent's new position.\r\n            const nodeExit = node.exit().transition(transition).remove()\r\n                .attr(\"transform\", d => `translate(${source.y},${source.x})`)\r\n                .attr(\"fill-opacity\", 0)\r\n                .attr(\"stroke-opacity\", 0);\r\n\r\n            // Update the linksâ€¦\r\n            const link = gLink.selectAll(\"path\")\r\n                .data(links, d => d.target.id);\r\n\r\n            // Enter any new links at the parent's previous position.\r\n            const linkEnter = link.enter().append(\"path\")\r\n                .attr(\"d\", d => {\r\n                    const o = { x: source.x0, y: source.y0 };\r\n                    return diagonal({ source: o, target: o });\r\n                });\r\n\r\n            // Transition links to their new position.\r\n            link.merge(linkEnter).transition(transition)\r\n                .attr(\"d\", diagonal);\r\n\r\n            // Transition exiting nodes to the parent's new position.\r\n            link.exit().transition(transition).remove()\r\n                .attr(\"d\", d => {\r\n                    const o = { x: source.x, y: source.y };\r\n                    return diagonal({ source: o, target: o });\r\n                });\r\n\r\n            // Stash the old positions for transition.\r\n            root.eachBefore(d => {\r\n                d.x0 = d.x;\r\n                d.y0 = d.y;\r\n            });\r\n        }\r\n\r\n        update(root);\r\n\r\n        return svg.node();\r\n\r\n    }\r\n}\r\n</script>\r\n  \r\n<style scoped>\r\npre {\r\n    background-color: #eee;\r\n    border: 1px solid #999;\r\n    display: block;\r\n    padding: 20px;\r\n    text-align: left;\r\n}\r\n\r\nsvg {\r\n    border: 1px solid rgba(0, 0, 255, 0.281);\r\n}\r\n</style>","import { render } from \"./CollapsibleTreeView.vue?vue&type=template&id=e7d5c844&scoped=true\"\nimport script from \"./CollapsibleTreeView.vue?vue&type=script&lang=js\"\nexport * from \"./CollapsibleTreeView.vue?vue&type=script&lang=js\"\n\nimport \"./CollapsibleTreeView.vue?vue&type=style&index=0&id=e7d5c844&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\luukv\\\\source\\\\repos\\\\d3_vis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-e7d5c844\"]])\n\nexport default __exports__"],"names":["ref","title","class","fluid","cols","sm","style","height","codeSample","width","preserveAspectRatio","name","data","created","window","addEventListener","this","setBoxWidth","destroyed","removeEventListener","methods","$refs","box","clientWidth","mounted","width_m","console","log","dx","dy","margin","top","right","bottom","left","diagonal","x","d","y","tree","nodeSize","root","x0","y0","descendants","forEach","i","id","_children","children","depth","length","svg","attr","gLink","append","gNode","update","source","event","duration","altKey","nodes","reverse","links","eachBefore","node","transition","tween","ResizeObserver","dispatch","selectAll","nodeEnter","enter","on","text","clone","lower","merge","exit","remove","link","target","linkEnter","o","__exports__","render"],"sourceRoot":""}